name: CI

# I am commenting this out because we leave this for production
# on:
#   push:
#     branches: [main, develop]  # Only main branches
#   pull_request:
#     branches: [main]  # PRs to main

#  since we are in active dev this is a better option
on:
  push:
    branches: ['**'] # Run on all branches
  pull_request:
    branches: [main, develop]

jobs:
  test:
    needs: trivy-scan-source
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: daraja_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun (no Node.js needed)
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies with Bun & Python
        run: |
          bun install --frozen-dependencies
          cd webhook-service && bun install --frozen-dependencies && cd ..
          cd cli
          python -m venv venv
          source venv/bin/activate
          pip install -e ".[dev]"
          cd ..

      - name: Lint JS/TS
        run: |
          bun run lint || echo "‚ö†Ô∏è Lint issues"

      - name: Check TypeScript compilation
        run: |
          npx tsc --noEmit --skipLibCheck || echo "‚ö†Ô∏è TypeScript warnings"

      - name: Lint Python code
        run: |
          cd cli
          source venv/bin/activate
          pip install flake8 black || true
          flake8 src/ --max-line-length=88 --ignore=E203,W503 || echo "‚ö†Ô∏è Python lint warnings"
          black --check src/ || echo "‚ö†Ô∏è Python formatting"

      - name: Build webhook-service
        run: |
          cd webhook-service
          echo "‚úÖ TS source OK"
          test -f src/server.ts && echo "‚úÖ server.ts exists" || exit 1

      - name: Build dashboard
        run: |
          cd dashboard
          bun run build || echo "‚ö†Ô∏è Dashboard build issue"

      - name: Run Tests for Projects
        run: |
          run_tests() {
            local dir=$1
            echo "üîç Running tests in $dir..."
            cd "$dir" || exit 1

            if [ -f package.json ]; then
              if bun run | grep -q test; then
                echo "üì¶ Found bun test script in $dir"
                bun run test --coverage && echo "‚úÖ Tests passed for $dir" || { echo "‚ùå Tests failed for $dir"; exit 1; }
              elif npx --no-install jest --version >/dev/null 2>&1; then
                echo "üì¶ No bun test script, falling back to Jest in $dir"
                npx jest --coverage && echo "‚úÖ Tests passed for $dir" || { echo "‚ùå Tests failed for $dir"; exit 1; }
              else
                echo "‚ö†Ô∏è No test script or Jest setup found for $dir"
              fi
            else
              echo "‚ö†Ô∏è No package.json found in $dir"
            fi

            cd ..
          }

          run_tests webhook-service
          run_tests dashboard

      - name: Test CLI
        run: |
          cd cli
          source venv/bin/activate
          if test -f test_cli.py; then
            python -m pytest test_cli.py -v || echo "‚ö†Ô∏è CLI pytest failed"
          else
            echo "‚ö†Ô∏è No CLI tests yet"
          fi
          python -c "import daraja_cli.main; print('‚úÖ CLI imports')" || echo "‚ö†Ô∏è CLI import failed"

      - name: Basic health checks
        run: |
          cd webhook-service
          echo "‚úÖ webhook-service builds"
          test -f src/server.ts && echo "‚úÖ server.ts present"

      - name: Integration Checks
        run: |
          echo "üß™ Checking DB and Redis availability"
          echo "‚úÖ Basic CI pipeline complete"

  lint-and-format:
    needs: trivy-scan-source
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          bun install --frozen-dependencies
          cd cli
          python -m venv venv
          source venv/bin/activate
          pip install -e ".[dev]" flake8 black
      - name: Check formatting
        run: |
          if grep -q "prettier" package.json || [ -f .prettierrc ]; then
            bun run format:check || echo "‚ö†Ô∏è Prettier check failed"
          else
            echo "‚ö†Ô∏è No Prettier config yet"
          fi
          cd cli
          source venv/bin/activate
          black --check --diff src/ || echo "‚ö†Ô∏è Python formatting needed"
      - name: Lint all code
        run: |
          bun run lint || echo "‚ö†Ô∏è JS/TS lint warnings"
          cd cli
          source venv/bin/activate
          flake8 src/ --max-line-length=88 --ignore=E203,W503 || echo "‚ö†Ô∏è Python lint warnings"

  trivy-scan-source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan workspaces and generate reports
        run: |
          set -euo pipefail
          mkdir -p trivy-reports
          has_issues=0

          for dir in dashboard webhook-service cli delivery-worker; do
            echo "üîç Scanning $dir..."
            trivy fs "$dir" \
              --scanners vuln \
              --severity CRITICAL,HIGH \
              --format json \
              --output "trivy-reports/${dir//\//_}-report.json" \
              --exit-code 0 || has_issues=1
          done

          if [ $has_issues -eq 1 ]; then
            echo "‚ùå Vulnerabilities found in one or more modules."
            touch trivy-reports/_vulns_found.flag
          else
            echo "‚úÖ No critical/high vulnerabilities found."
          fi

      - name: Upload Trivy Reports
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: trivy-source-reports
          path: trivy-reports

  # quality-gate:
  #   runs-on: ubuntu-latest
  #   needs: [test]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install dependencies
  #       run: |
  #         npm install
  #     - name: Run ESLint
  #       run: |
  #         npx eslint . || exit 1
  #     - name: Run Prettier
  #       run: |
  #         npx prettier --check . || exit 1

  detect-changes:
    runs-on: ubuntu-latest
    needs: [test]
    outputs:
      dashboard_changed: ${{ steps.set.outputs.dashboard_changed }}
      webhook_service_changed: ${{ steps.set.outputs.webhook_service_changed }}
      cli_changed: ${{ steps.set.outputs.cli_changed }}
      delivery_worker_changed: ${{ steps.set.outputs.delivery_worker_changed }}
    steps:
      - uses: actions/checkout@v4
      - id: set
        run: |
          git fetch origin ${{ github.event.before }}
          changed_dirs=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | cut -d/ -f1 | sort -u)
          echo "Changed directories: $changed_dirs"
          for dir in dashboard webhook-service cli delivery-worker; do
            if echo "$changed_dirs" | grep -q "^$dir$"; then
              key_name="${dir//-/_}_changed"
              echo "$key_name=true" >> $GITHUB_OUTPUT
            else
              key_name="${dir//-/_}_changed"
              echo "$key_name=false" >> $GITHUB_OUTPUT
            fi
          done

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: [detect-changes]
    strategy:
      matrix:
        service:
          - dashboard
          - webhook-service
          - cli
          - delivery-worker
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/CI/CD-Pipeline'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Convert repository owner to lowercase
        id: repo_owner
        run: |
          echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT


      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ steps.repo_owner.outputs.owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push ${{ matrix.service }}
        if: |
          (matrix.service == 'dashboard' && needs.detect-changes.outputs.dashboard_changed == 'true') ||
          (matrix.service == 'webhook-service' && needs.detect-changes.outputs.webhook_service_changed == 'true') ||
          (matrix.service == 'cli' && needs.detect-changes.outputs.cli_changed == 'true') ||
          (matrix.service == 'delivery-worker' && needs.detect-changes.outputs.delivery_worker_changed == 'true')
        env:
          IMAGE: ghcr.io/${{ steps.repo_owner.outputs.owner }}/darajadev-${{ matrix.service }}:latest
        run: |
          echo "üî® Building ${{ matrix.service }}..."

          CONTEXT="."
          DOCKERFILE="${{ matrix.service }}/Dockerfile"

          if [ ! -f "$DOCKERFILE" ]; then
            echo "‚ùå No Dockerfile found for ${{ matrix.service }} at $DOCKERFILE"
            exit 1
          fi

          docker build -f "$DOCKERFILE" -t "$IMAGE" "$CONTEXT"
          docker push "$IMAGE"

  trivy-scan:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push-docker]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/CI/CD-Pipeline'
    strategy:
      matrix:
        service:
          - dashboard
          - webhook-service
          - cli
          - delivery-worker
    steps:
      - uses: actions/checkout@v4

      - name: Convert repository owner to lowercase
        id: repo_owner
        run: |
          echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set image ref
        id: image
        run: |
          echo "ref=ghcr.io/${{ steps.repo_owner.outputs.owner }}/darajadev-${{ matrix.service }}:latest" >> $GITHUB_OUTPUT

      - name: Install Trivy CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Download Trivy HTML report template
        run: |
          mkdir -p contrib
          curl -sSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o contrib/html.tpl

      - name: Run Trivy vulnerability scanner for ${{ matrix.service }}
        run: |
          IMAGE="ghcr.io/${{ steps.repo_owner.outputs.owner }}/darajadev-${{ matrix.service }}:latest"
          REPORT_HTML="trivy-${{ matrix.service }}.html"

          echo "üîç Scanning image $IMAGE and generating HTML report..."
          trivy image "$IMAGE" \
            --format template \
            --template "@contrib/html.tpl" \
            --output "$REPORT_HTML" \
            --exit-code 0 \
            --ignore-unfixed \
            --severity CRITICAL,HIGH

      - name: Upload HTML Trivy report for ${{ matrix.service }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-${{ matrix.service }}-html
          path: trivy-${{ matrix.service }}.html

          
  # sonarqube-scan:
  #   runs-on: ubuntu-latest
  #   needs: [test]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: SonarQube Scan
  #       uses: sonarsource/sonarqube-scan-action@master
  #       with:
  #         projectBaseDir: .
  #         args: >
  #           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
  #           -Dsonar.organization=${{ secrets.SONAR_ORG }}
  #           -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
  #           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
